name: Build

permissions:
  contents: write  # Release ÏÉùÏÑ±ÏùÑ ÏúÑÌï¥ ÌïÑÏöî

on:
  push:
    branches: [ "main" ]  # main Î∏åÎûúÏπò Ìë∏Ïãú Ïãú Ïã§Ìñâ
    tags:
      - 'v*.*.*'  # ÌÉúÍ∑∏ Ìë∏Ïãú ÏãúÏóêÎèÑ Ïã§Ìñâ (Ïòà: v1.2.3)
  workflow_dispatch:  # ÏàòÎèô Ïã§Ìñâ Í∞ÄÎä•

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install Windows dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Run OpenGL smoke test
      run: |
        python test_opengl_smoke.py
      continue-on-error: true
    
    - name: Build Windows executable
      run: |
        python build.py
      env:
        BUILD_NUMBER: ${{ github.run_number }}
    
    - name: Download and Install Inno Setup
      shell: pwsh
      run: |
        $inno_url = "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe"
        $inno_installer = "innosetup-installer.exe"
        Invoke-WebRequest -Uri $inno_url -OutFile $inno_installer
        Start-Process -FilePath $inno_installer -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART" -Wait

    - name: Create Windows installer
      shell: pwsh
      run: |
        $inno_path = "C:\Program Files (x86)\Inno Setup 6"
        $env:PATH = "$inno_path;$env:PATH"
        iscc.exe "/DBuildNumber=${{ github.run_number }}" "InnoSetup/Modan2.iss"
      continue-on-error: true
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: modan2-windows
        path: |
          dist/
          InnoSetup/Output/Modan2_v*_build*_Installer.exe
    
    
  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install macOS system dependencies
      run: |
        brew install qt5
        # Set Qt5 environment variables
        echo "export PATH=/usr/local/opt/qt5/bin:$PATH" >> ~/.bash_profile
        echo "export LDFLAGS=-L/usr/local/opt/qt5/lib" >> ~/.bash_profile
        echo "export CPPFLAGS=-I/usr/local/opt/qt5/include" >> ~/.bash_profile
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Run OpenGL smoke test
      run: |
        python test_opengl_smoke.py
      continue-on-error: true
    
    - name: Build macOS application
      run: |
        # Set Qt5 paths for PyInstaller
        export PATH=/usr/local/opt/qt5/bin:$PATH
        python build.py
      env:
        BUILD_NUMBER: ${{ github.run_number }}
    
    - name: Create macOS app bundle
      run: |
        # If build.py creates an app bundle, we're good
        # Otherwise, create a simple .app structure
        if [ ! -d "dist/Modan2.app" ]; then
          mkdir -p "dist/Modan2.app/Contents/MacOS"
          cp -r dist/* "dist/Modan2.app/Contents/MacOS/" 2>/dev/null || true
        fi
    
    - name: Upload macOS artifact  
      uses: actions/upload-artifact@v4
      with:
        name: modan2-macos
        path: dist/
  
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install Linux system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libxcb-xinerama0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xfixes0 \
          libxcb-shape0 \
          libxcb-cursor0 \
          qt5-qmake \
          qtbase5-dev \
          libqt5gui5 \
          libqt5core5a \
          libqt5widgets5 \
          libglut-dev \
          libglut3.12 \
          python3-opengl \
          fuse
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Run OpenGL smoke test
      run: |
        python test_opengl_smoke.py
      continue-on-error: true
    
    - name: Build Linux executable
      run: |
        python build.py
      env:
        BUILD_NUMBER: ${{ github.run_number }}
    
    - name: Create Linux AppImage (if tools available)
      run: |
        # Check if AppImage build tools are available
        if [ -f "build_linux/makeself.sh" ]; then
          echo "Building Linux installer..."
          cd build_linux
          ./makeself.sh || echo "Linux installer build failed, continuing..."
          cd ..
        else
          echo "Linux installer tools not found, skipping..."
        fi
      continue-on-error: true
    
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: modan2-linux
        path: |
          dist/
          build_linux/*.run

  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Extract version from version.py
      id: get_version
      run: |
        VERSION=$(python -c "exec(open('version.py').read()); print(__version__)")
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-files/
    
    - name: Create Windows installer zip
      run: |
        cd release-files/modan2-windows/InnoSetup/Output/
        for file in *_Installer.exe; do
          if [ -f "$file" ]; then
            zip_name="${file%.exe}.zip"
            zip "$zip_name" "$file"
            echo "Created $zip_name from $file"
          fi
        done
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}-build.${{ github.run_number }}
        name: Modan2 v${{ steps.get_version.outputs.VERSION }} Build ${{ github.run_number }}
        body: |
          üöÄ **Modan2 Cross-Platform Release**
          
          Built from commit: ${{ github.sha }}
          Build number: ${{ github.run_number }}
          
          **Downloads:**
          - ü™ü **Windows Installer**: `Modan2_v${{ steps.get_version.outputs.VERSION }}_build${{ github.run_number }}_Installer.zip` - Extract and run the installer
          - üêß **Linux**: `Modan2_v${{ steps.get_version.outputs.VERSION }}_build${{ github.run_number }}_linux` - Executable binary
          - üçé **macOS**: `Modan2_v${{ steps.get_version.outputs.VERSION }}_build${{ github.run_number }}_macos` - Application bundle
          
          **Installation:**
          - **Windows**: Extract the zip file and run the installer as administrator
          - **Linux**: Make executable with `chmod +x` and run
          - **macOS**: Extract and run the application
        files: |
          release-files/modan2-windows/InnoSetup/Output/*_Installer.zip
          release-files/modan2-linux/dist/Modan2_v*_build*_linux
          release-files/modan2-macos/Modan2_v*_macos
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}